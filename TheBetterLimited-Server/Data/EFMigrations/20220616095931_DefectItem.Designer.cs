// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheBetterLimited_Server.Data;

#nullable disable

namespace TheBetterLimited_Server.Data.EFMigrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220616095931_DefectItem")]
    partial class DefectItem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.4.22229.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("longblob");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LoginFailedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LoginFailedCount")
                        .HasColumnType("int(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("char(20)");

                    b.Property<string>("_StaffId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<DateTime?>("unlockDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("_StaffId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Appointment", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_customerId")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("_departmentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_sessionId")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_teamId")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.HasKey("ID");

                    b.HasIndex("_customerId");

                    b.HasIndex("_departmentId");

                    b.HasIndex("_sessionId");

                    b.HasIndex("_teamId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.BookingOrder", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("_appointmentId")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_customerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.HasKey("ID");

                    b.HasIndex("_appointmentId");

                    b.HasIndex("_customerId");

                    b.ToTable("BookingOrder");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Budget", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(7,2)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ResetDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("_operatorId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.HasKey("ID");

                    b.HasIndex("_operatorId");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Catalogue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Catalogue");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Customer", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("ID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.DayOffRecord", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<DateTime>("OffDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("_staffID")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.HasKey("ID");

                    b.HasIndex("_staffID");

                    b.ToTable("DayOffRecord");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.DefectItemRecord", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<int>("HandleStatus")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("_creatorId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_customerId")
                        .HasColumnType("char(10)");

                    b.Property<string>("_operatorId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_salesOrderId")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_supplierGoodsStockId")
                        .IsRequired()
                        .HasColumnType("varchar(9)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("_creatorId");

                    b.HasIndex("_customerId");

                    b.HasIndex("_operatorId");

                    b.HasIndex("_salesOrderId");

                    b.HasIndex("_supplierGoodsStockId");

                    b.ToTable("DefectItemRecord");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("_budgetId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.HasKey("Id");

                    b.HasIndex("_budgetId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.DisplayItem", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("_goodsId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_locationId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_supplierId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.HasKey("ID");

                    b.HasIndex("_goodsId");

                    b.HasIndex("_locationId");

                    b.HasIndex("_supplierId");

                    b.ToTable("DisplayItem");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Goods", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GTINCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("longblob");

                    b.Property<int>("Price")
                        .HasColumnType("MEDIUMINT");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int(1)");

                    b.Property<string>("_catalogueId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.HasKey("Id");

                    b.HasIndex("_catalogueId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("Loc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("_senderId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.HasKey("Id");

                    b.HasIndex("_senderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Permission", b =>
                {
                    b.Property<string>("_menuId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("_positionId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<bool?>("delete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("read")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("write")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("_menuId", "_positionId");

                    b.HasIndex("_positionId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("_departmentId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("jobTitle")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("_departmentId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.PurchaseOrder", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OperateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("_createrId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("_operatorId")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("_warehouseId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.HasKey("ID");

                    b.HasIndex("_createrId");

                    b.HasIndex("_operatorId");

                    b.HasIndex("_warehouseId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.PurchaseOrder_Supplier_Goods", b =>
                {
                    b.Property<string>("_purchaseOrderId")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_supplierGoodsId")
                        .HasMaxLength(9)
                        .HasColumnType("char(9)");

                    b.Property<short>("Quantity")
                        .HasColumnType("SMALLINT");

                    b.HasKey("_purchaseOrderId", "_supplierGoodsId");

                    b.HasIndex("_supplierGoodsId");

                    b.ToTable("PurchaseOrder_Supplier_Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.RestockRequest", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OperateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("_createrId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("_operatorId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("_storeId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.HasKey("ID");

                    b.HasIndex("_createrId");

                    b.HasIndex("_operatorId");

                    b.HasIndex("_storeId");

                    b.ToTable("RestockRequest");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.RestockRequest_Supplier_Goods", b =>
                {
                    b.Property<string>("_restockRequestId")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_supplierGoodsId")
                        .HasMaxLength(9)
                        .HasColumnType("char(9)");

                    b.Property<int>("_quantity")
                        .HasColumnType("MEDIUMINT");

                    b.HasKey("_restockRequestId", "_supplierGoodsId");

                    b.HasIndex("_supplierGoodsId");

                    b.ToTable("RestockRequest_Supplier_Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SalesOrder", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("_creatorId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("_operatorId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("_storeId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("_creatorId");

                    b.HasIndex("_operatorId");

                    b.HasIndex("_storeId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SalesOrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<sbyte>("Quantity")
                        .HasColumnType("TINYINT");

                    b.Property<string>("_bookingOrderId")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_salesOrderId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_supplierGoodsStockId")
                        .IsRequired()
                        .HasColumnType("varchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("_bookingOrderId");

                    b.HasIndex("_salesOrderId");

                    b.HasIndex("_supplierGoodsStockId");

                    b.ToTable("SalesOrderItem");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SalesOrderItem_Appointment", b =>
                {
                    b.Property<string>("_salesOrderItemId")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("_appointmentId")
                        .HasColumnType("char(10)");

                    b.HasKey("_salesOrderItemId", "_appointmentId");

                    b.HasIndex("_appointmentId");

                    b.ToTable("SalesOrderItem_Appointment");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Session", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<sbyte>("NumOfAppointments")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("_departmentId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.HasKey("ID");

                    b.HasIndex("_departmentId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SessionSetting", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<sbyte>("NumOfAppointments")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("sessionSetting");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<int?>("Age")
                        .HasColumnType("integer(2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Sex")
                        .HasColumnType("char(1)");

                    b.Property<string>("_AccountId")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("_departmentId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("_positionId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("_storeId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("_teamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("_warehouseId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.HasKey("Id");

                    b.HasIndex("_AccountId");

                    b.HasIndex("_departmentId");

                    b.HasIndex("_positionId");

                    b.HasIndex("_storeId");

                    b.HasIndex("_teamId");

                    b.HasIndex("_warehouseId");

                    b.ToTable("Staff");

                    b.HasCheckConstraint("age_cc", "age >= 18 and age <= 60");

                    b.HasCheckConstraint("sex_cc", "sex in ('M' , 'F') ");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Staff_Message", b =>
                {
                    b.Property<string>("_messageId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("_receiverId")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("_messageId", "_receiverId");

                    b.HasIndex("_receiverId");

                    b.ToTable("Staff_Message");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Store", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("_locationID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.HasKey("ID");

                    b.HasIndex("_locationID");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Supplier", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Contact")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("ID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Supplier_Goods", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(9)
                        .HasColumnType("char(9)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("DECIMAL(8,2)");

                    b.Property<string>("_goodsId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_supplierId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)");

                    b.HasKey("ID");

                    b.HasIndex("_goodsId");

                    b.HasIndex("_supplierId");

                    b.ToTable("Supplier_Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Supplier_Goods_Stock", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("_supplierGoodsId")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("_locationId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<int>("MaxLimit")
                        .HasColumnType("MEDIUMINT");

                    b.Property<int>("MinLimit")
                        .HasColumnType("MEDIUMINT");

                    b.Property<int>("Quantity")
                        .HasColumnType("MEDIUMINT");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("MEDIUMINT");

                    b.Property<bool>("isSoftDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id", "_supplierGoodsId", "_locationId");

                    b.HasIndex("_locationId");

                    b.HasIndex("_supplierGoodsId");

                    b.ToTable("Supplier_Goods_Stock");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Team", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("_departmentId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.HasKey("ID");

                    b.HasIndex("_departmentId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Transaction", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(7,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("_salesOrderId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.HasKey("ID");

                    b.HasIndex("_salesOrderId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Warehouse", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("_locationID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.HasKey("ID");

                    b.HasIndex("_locationID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Account", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("_StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Appointment", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("_customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("_departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Session", "Session")
                        .WithMany()
                        .HasForeignKey("_sessionId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Team", "Team")
                        .WithMany()
                        .HasForeignKey("_teamId");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("Session");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.BookingOrder", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("_appointmentId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("_customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Budget", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Operator")
                        .WithMany()
                        .HasForeignKey("_operatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.DayOffRecord", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("_staffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.DefectItemRecord", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "User")
                        .WithMany()
                        .HasForeignKey("_creatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("_customerId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Operator")
                        .WithMany()
                        .HasForeignKey("_operatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("_salesOrderId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Supplier_Goods_Stock", "SupplierGoodsStock")
                        .WithMany("DefectItemRecords")
                        .HasForeignKey("_supplierGoodsStockId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("SalesOrder");

                    b.Navigation("SupplierGoodsStock");

                    b.Navigation("User");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Department", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Budget", "budget")
                        .WithMany()
                        .HasForeignKey("_budgetId");

                    b.Navigation("budget");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.DisplayItem", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("_goodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("_locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("_supplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Location");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Goods", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Catalogue", "Catalogue")
                        .WithMany()
                        .HasForeignKey("_catalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogue");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Message", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Account", "sender")
                        .WithMany()
                        .HasForeignKey("_senderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sender");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Permission", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Menu", "menu")
                        .WithMany("permissions")
                        .HasForeignKey("_menuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Position", "position")
                        .WithMany("permissions")
                        .HasForeignKey("_positionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("menu");

                    b.Navigation("position");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Position", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Department", "department")
                        .WithMany()
                        .HasForeignKey("_departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.PurchaseOrder", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Creater")
                        .WithMany()
                        .HasForeignKey("_createrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Operator")
                        .WithMany()
                        .HasForeignKey("_operatorId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("_warehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creater");

                    b.Navigation("Operator");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.PurchaseOrder_Supplier_Goods", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("_purchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Supplier_Goods", "Supplier_Goods")
                        .WithMany("PurchaseOrder_Supplier_Goodss")
                        .HasForeignKey("_supplierGoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier_Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.RestockRequest", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Creater")
                        .WithMany()
                        .HasForeignKey("_createrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Operator")
                        .WithMany()
                        .HasForeignKey("_operatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("_storeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creater");

                    b.Navigation("Location");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.RestockRequest_Supplier_Goods", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.RestockRequest", "RestockRequest")
                        .WithMany()
                        .HasForeignKey("_restockRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Supplier_Goods", "Supplier_Goods")
                        .WithMany("RestockRequest_Supplier_Goodss")
                        .HasForeignKey("_supplierGoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestockRequest");

                    b.Navigation("Supplier_Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SalesOrder", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "User")
                        .WithMany()
                        .HasForeignKey("_creatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Staff", "Operator")
                        .WithMany()
                        .HasForeignKey("_operatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Store", "Store")
                        .WithMany()
                        .HasForeignKey("_storeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SalesOrderItem", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.BookingOrder", "BookingOrder")
                        .WithMany()
                        .HasForeignKey("_bookingOrderId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.SalesOrder", "SalesOrder")
                        .WithMany("Items")
                        .HasForeignKey("_salesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Supplier_Goods_Stock", "SupplierGoodsStock")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("_supplierGoodsStockId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOrder");

                    b.Navigation("SalesOrder");

                    b.Navigation("SupplierGoodsStock");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SalesOrderItem_Appointment", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Appointment", "Appointment")
                        .WithMany("SaleOrderItem_Appointments")
                        .HasForeignKey("_appointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.SalesOrderItem", "SalesOrderItem")
                        .WithMany("SaleOrderItem_Appointment")
                        .HasForeignKey("_salesOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("SalesOrderItem");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Session", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("_departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Staff", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Account", "acc")
                        .WithMany()
                        .HasForeignKey("_AccountId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Department", "department")
                        .WithMany("staffs")
                        .HasForeignKey("_departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Position", "position")
                        .WithMany()
                        .HasForeignKey("_positionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Store", "store")
                        .WithMany()
                        .HasForeignKey("_storeId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Team", "team")
                        .WithMany()
                        .HasForeignKey("_teamId");

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Warehouse", "warehouse")
                        .WithMany()
                        .HasForeignKey("_warehouseId");

                    b.Navigation("acc");

                    b.Navigation("department");

                    b.Navigation("position");

                    b.Navigation("store");

                    b.Navigation("team");

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Staff_Message", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Message", "message")
                        .WithMany("staff_messages")
                        .HasForeignKey("_messageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Account", "receiver")
                        .WithMany()
                        .HasForeignKey("_receiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("message");

                    b.Navigation("receiver");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Store", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("_locationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Supplier_Goods", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Goods", "Goods")
                        .WithMany("Supplier_Goods")
                        .HasForeignKey("_goodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Supplier", "Supplier")
                        .WithMany("Supplier_Goods")
                        .HasForeignKey("_supplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Supplier_Goods_Stock", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("_locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheBetterLimited_Server.Data.Entity.Supplier_Goods", "Supplier_Goods")
                        .WithMany("Supplier_Goods_Stocks")
                        .HasForeignKey("_supplierGoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Supplier_Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Team", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Department", "Department")
                        .WithMany("teams")
                        .HasForeignKey("_departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Transaction", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("_salesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Warehouse", b =>
                {
                    b.HasOne("TheBetterLimited_Server.Data.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("_locationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Appointment", b =>
                {
                    b.Navigation("SaleOrderItem_Appointments");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Department", b =>
                {
                    b.Navigation("staffs");

                    b.Navigation("teams");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Goods", b =>
                {
                    b.Navigation("Supplier_Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Menu", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Message", b =>
                {
                    b.Navigation("staff_messages");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Position", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SalesOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.SalesOrderItem", b =>
                {
                    b.Navigation("SaleOrderItem_Appointment");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Supplier", b =>
                {
                    b.Navigation("Supplier_Goods");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Supplier_Goods", b =>
                {
                    b.Navigation("PurchaseOrder_Supplier_Goodss");

                    b.Navigation("RestockRequest_Supplier_Goodss");

                    b.Navigation("Supplier_Goods_Stocks");
                });

            modelBuilder.Entity("TheBetterLimited_Server.Data.Entity.Supplier_Goods_Stock", b =>
                {
                    b.Navigation("DefectItemRecords");

                    b.Navigation("SalesOrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
